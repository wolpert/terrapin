/*
 * Copyright (c) 2022 CodeHead Systems. All rights reserved
 */

// Testing in Intelij requires the library in your lib path. Errors will show where it needs to be. Example
// from an Ubuntu box
//  sudo mkdir /usr/lib/jni
//  sudo cp -i oop-mock-dynamodb/build/libs/libsqlite4java-linux-amd64-1.0.392.so /usr/lib/jni


ext {
    appName = "datastore-test"
    version = "1.0.0"
}

configurations {
    project.archivesBaseName = "${appName}"
    jar.baseName = "${appName}"
    dynamodb
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}
//jacocoTestReport.finalizedBy jacocoTestCoverageVerification


task copyNativeDeps(type: Copy) {
    from configurations.dynamodb
    into "$project.buildDir/libs/"
}

test.dependsOn copyNativeDeps
test.doFirst {
    systemProperty "java.library.path", 'build/libs'
}
// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "wolpert"
            name "Ned Wolpert"
            email "ned.wolpert@codeheadsystems.com"
        }
    }

    scm {
        url "https://github.com/wolpert/terrapin"
    }
}

dependencies {

    // DynamoDB testing
    dynamodb fileTree(dir: 'lib', include: ["*.dylib", "*.so", "*.dll"])
    dynamodb "com.amazonaws:DynamoDBLocal:${awsLocalDDB}"
    implementation "com.amazonaws:DynamoDBLocal:${awsLocalDDB}"
    implementation "com.amazonaws:aws-java-sdk-dynamodb:${awsSDK}"
    implementation "software.amazon.awssdk:dynamodb:${awsSDK2}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation("com.google.guava:guava:${guavaVersion}")
    api("org.hsqldb:hsqldb:${hsqldbVersion}")

    implementation project(":codehead-test")
    api("org.assertj:assertj-core:${assertjVersion}")
    api("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
    api("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    api("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")
    api("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    api("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("ch.qos.logback:logback-classic:${logbackVersion}")
    testImplementation("ch.qos.logback:logback-core:${logbackVersion}")
}
