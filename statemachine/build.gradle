/*
 * Copyright (c) 2020 CodeHead Systems. All rights reserved
 */

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    appName = "statemachine"
    version = "1.0"
}

configurations {
    project.archivesBaseName = "${appName}"
    jar.baseName = "${appName}"
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "wolpert"
            name "Ned Wolpert"
            email "ned.wolpert@codeheadsystems.com"
        }
    }

    scm {
        url "https://github.com/wolpert/terrapin"
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        StateMachinePublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.codeheadsystems.terrapin'
            artifactId project.ext.appName
            version project.ext.version
            pom.withXml {
                def projectNode = asNode()
                // Append POM configuration.
                projectNode.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['StateMachinePublication']
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'com.codeheadsystems.terrapin'
        name = project.ext.appName
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/wolpert/terrapin/tree/main/codehead-test'
        version {
            name = project.ext.version
            released = new Date()
        }
    }
}

test {
    useJUnitPlatform() // needed for junit5
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*_Factory.class',
                    '**/*_Factory**.class'
            ])
        }))
    }
}

dependencies {
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("commons-io:commons-io:${commonsIoVersion}")
    implementation("io.dropwizard.metrics:metrics-core:${metricsVersion}")
    implementation("javax.inject:javax.inject:${javaxInjectVersion}")
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")

    implementation("org.immutables:value-annotations:${immutablesVersion}")
    annotationProcessor("org.immutables:value:${immutablesVersion}")

    implementation("com.google.dagger:dagger:${daggerVersion}")
    annotationProcessor("com.google.dagger:dagger-compiler:${daggerVersion}")


    // Use JUnit Jupiter Engine for testing.
    testImplementation project(':codehead-test')

    testImplementation("ch.qos.logback:logback-classic:${logbackVersion}")
    testImplementation("ch.qos.logback:logback-core:${logbackVersion}")
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
}
